// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      Role
  student   Student?
  teacher   Teacher?
  Admin     Admin?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String?
  @@map("users")
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

model Student {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int       @unique
  nim       String    @unique
  enrollments Enrollment[]
  gpa       Float?
  academicAdvisorId   Int?
  advisor   Teacher?  @relation(fields: [academicAdvisorId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@map("students")
}

model Teacher {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int       @unique
  nip       String    @unique
  courses   Course[]
  students  Student[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@map("teachers")
}

model Admin {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int       @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Course {
  id          Int           @id @default(autoincrement())
  name        String
  code        String        @unique
  teacher     Teacher       @relation(fields: [teacherId], references: [id])
  teacherId   Int
  enrollments Enrollment[]
  semester    Semester
  sks         Int
  schedule    Schedule[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  @@map("courses")
}

enum Semester {
  semester_1
  semester_2
  semester_3
  semester_4
  semester_5
  semester_6
  semester_7
  semester_8
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  grade     Grade?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("enrollments")
}

enum Grade {
  A
  B
  C
  D
  E
}

// model Grade {
//   id            Int        @id @default(autoincrement())
//   enrollment    Enrollment @relation(fields: [enrollmentId], references: [id])
//   enrollmentId  Int        @unique
//   grade         Float
//   createdAt     DateTime   @default(now())
//   updatedAt     DateTime   @updatedAt
// }

model Schedule {
  id          Int       @id @default(autoincrement())
  courseId    Int
  day         DayOfWeek
  time        String    // Example: "10:00-12:00"
  room        String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

