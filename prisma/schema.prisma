// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  name          String
  role          Role
  student       Student?
  teacher       Teacher?
  Admin         Admin?
  kritikSaran   KritikSaran[]
  telephone     String?
  tanggalLahir  DateTime?
  gender        Gender?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  token         String?
  recoveryToken String?
  @@map("users")
}

enum Gender {
  MAN
  WOMAN
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

model Student {
  id                  Int       @id @default(autoincrement())
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int       @unique
  nim                 String    @unique
  enrollments         Enrollment[]
  gpa                 Float     @default(0)
  academicAdvisorId   Int?
  advisor             Teacher?  @relation(fields: [academicAdvisorId], references: [id])
  sks                 Int       @default(0)
  sksOFSemester       Int       @default(0)
  absensi             Absensi[]
  beasiswa            PenerimaBeasiswa[]
  pembayaran          Pembayaran[]
  statusStudent       statusStudent
  alumni              Alumni?
  programStudi        String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  @@map("students")
}

enum statusStudent {
  ACTIVE
  DO
  LULUS
}

model Teacher {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int       @unique
  nip       String    @unique
  courses   Course[]
  students  Student[]
  gelar     String?
  keahlian  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@map("teachers")
}

model Admin {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int       @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Course {
  id          Int           @id @default(autoincrement())
  name        String
  code        String        @unique
  teacher     Teacher       @relation(fields: [teacherId], references: [id])
  teacherId   Int
  semester    Semester
  sks         Int
  programStudi String
  schedule    Schedule[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  @@map("courses")
}

enum Semester {
  semester_1
  semester_2
  semester_3
  semester_4
  semester_5
  semester_6
  semester_7
  semester_8
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  schedule  Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId Int
  grade     Grade?
  evaluasiDosen EvaluasiDosen?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("enrollments")
}

enum Grade {
  A
  B
  C
  D
  E
}

model Schedule {
  id          Int      @id @default(autoincrement())
  courseId    Int
  day         DayOfWeek
  time        String    // Example: "10:00-12:00"
  room        String
  course      Course   @relation(fields: [courseId], references: [id])
  absensi     Absensi[]
  enrollments Enrollment[]
  kouta       Int      @default(30)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("schedules")
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Absensi {
  id              Int      @id @default(autoincrement())
  studentId       Int
  student         Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  scheduleId      Int
  schedule        Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  statusKehadiran StatusKehadiran
  keterangan      String?
  pertemuan       Int
  materi          String
  createAt        DateTime @default(now())
  updatedAt       DateTime @updatedAt
  @@map("absences")
}

enum StatusKehadiran {
  HADIR
  ALPA
  SAKIT
  IZIN
}

model Beasiswa {
  id         Int      @id @default(autoincrement())
  nama       String
  deskripsi  String?
  mulai      DateTime
  akhir      DateTime
  penerima   PenerimaBeasiswa[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@map("scholarships")
}

model PenerimaBeasiswa {
  id            Int       @id @default(autoincrement())
  studentId     Int
  student       Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  beasiswaId    Int
  beasiswa      Beasiswa  @relation(fields: [beasiswaId], references: [id], onDelete: Cascade)
  tanggalTerima DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@map("scholarship_recipients")
}

model Berita {
  id        Int      @id @default(autoincrement())
  judul     String
  konten    String
  gambar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("news")
}

model KritikSaran {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pesan      String
  kategori   String
  type       TypeKritikSaran
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@map("feedbacks")
}

enum TypeKritikSaran {
  KRITIK
  SARAN
}

model EvaluasiDosen {
  id           Int           @id @default(autoincrement())
  enrollmentId Int           @unique
  enrollment   Enrollment    @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  nilai        NilaiEvaluasi
  komentar     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  @@map("evaluations")
}

enum NilaiEvaluasi {
  S
  A
  B
  C
  D
}

model Pembayaran {
  id               Int     @id @default(autoincrement())
  studentId        Int
  student          Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  total            Int
  jenisPembayaran  JenisPembayaran
  tanggal          DateTime
  bukti            String
  statusPembayaran StatusPembayaran
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  @@map("payments")
}

enum JenisPembayaran {
  BANK
  EWALLET
}

enum StatusPembayaran {
  FAILED
  PENDING
  SUCCESS
}

model Alumni {
  id           Int      @id @default(autoincrement())
  studentId    Int      @unique
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  tanggalLulus DateTime
  pekerjaan    String?
  perusahaan   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@map("graduates")
}